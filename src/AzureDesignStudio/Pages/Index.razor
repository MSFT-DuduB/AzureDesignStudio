@page "/"
@page "/authentication/{action}"
@using AzureDesignStudio.Components
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Reflection
@inject ILogger<Index> logger
@inject ModalService modalService
@inject NavigationManager navManager
@inject IApplicationInsights AppInsights
@inject AuthenticationStateProvider AuthenticationStateProvider

<UpdateAvailableDetector />

<Layout>
    <Sider Class="ads-sider" Width="295" Collapsible Collapsed=@collapsed NoTrigger CollapsedWidth="40" Theme="SiderTheme.Light">
        <div class="ads-toggle-sider-button">
            @if (collapsed)
            {
                <div title="Open"><Icon Type="menu-unfold" OnClick="toggleSider" /></div>
            }
            else
            {

                <div title="Close"><Icon Type="menu-fold" OnClick="toggleSider" /></div>
            }
        </div>
        <StencilPanel></StencilPanel>
    </Sider>

    <Content>
        <DiagramPanel></DiagramPanel>
    </Content>

</Layout>

@if (string.IsNullOrEmpty(Action))
{
    <Modal></Modal>
}
else
{
    if (Action == "login")
    {
        <Modal Visible="true" Centered="true" Closable="false" Footer="@null">
            <RemoteAuthenticatorView Action="@Action"/>
        </Modal>
    }
    else
    {
        <Modal Visible="true" Centered="true" Closable="false" Footer="@modalFooter" OnOk="HandleModalOk">
            <RemoteAuthenticatorView Action="@Action" />
        </Modal>
    }
}

@code {
    [Parameter] public string? Action { get; set; }
    [CascadingParameter] public Task<AuthenticationState> AuthenticationState { get; set; } = null!;

    RenderFragment modalFooter = 
    @<OneButtonModalFooter />
    ;

    bool collapsed;

    protected override void OnInitialized()
    {
        AuthenticationStateProvider.AuthenticationStateChanged += OnAuthenticationStateChanged;
        base.OnInitialized();
    }

    private void OnAuthenticationStateChanged(Task<AuthenticationState> authenticationStateTask)
    {
        // https://github.com/dotnet/aspnetcore/issues/29235
        _ = InvokeAsync(async () =>
        {
            var authState = await authenticationStateTask;
            var user = authState.User;
            if (user.Identity?.IsAuthenticated ?? false)
            {
                await AppInsights.SetAuthenticatedUserContext(user.FindFirst("oid")?.Value!);
                logger.LogInformation("User logged in. User Id: {userId}", user.FindFirst("oid")?.Value!);
            }
            else
            {
                await AppInsights.ClearAuthenticatedUserContext();
                logger.LogInformation("User logged out.");
            }
        });
    }

    void toggleSider()
    {
        this.collapsed = !collapsed;
    }

    void HandleModalOk()
    {
        navManager.NavigateTo("/");
    }
}