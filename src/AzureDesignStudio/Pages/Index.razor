@page "/"
@page "/authentication/{action}"
@using AzureDesignStudio.Components
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Reflection
@inject ILogger<Index> logger
@inject ModalService modalService
@inject NavigationManager navManager
@inject IApplicationInsights AppInsights
@inject AuthenticationStateProvider AuthenticationStateProvider

<UpdateAvailableDetector />

<Layout>
    <Sider Class="ads-sider" Width="295" Collapsible Collapsed=@collapsed NoTrigger CollapsedWidth="40" Theme="SiderTheme.Light">
        <div class="ads-toggle-sider-button">
            @if (collapsed)
            {
                <div title="Open"><Icon Component="_panelLeftExpand" OnClick="toggleSider" /></div>
            }
            else
            {

                <div title="Close"><Icon Component="_panelLeftFold" OnClick="toggleSider" /></div>
            }
        </div>
        <StencilPanel></StencilPanel>
    </Sider>

    <Content>
        <DiagramPanel></DiagramPanel>
    </Content>

</Layout>

@if (string.IsNullOrEmpty(Action))
{
    <Modal></Modal>
}
else
{
    if (Action == "login")
    {
        <Modal Visible="true" Centered="true" Closable="false" Footer="@null">
            <RemoteAuthenticatorView Action="@Action"/>
        </Modal>
    }
    else
    {
        <Modal Visible="true" Centered="true" Closable="false" Footer="@modalFooter" OnOk="HandleModalOk">
            <RemoteAuthenticatorView Action="@Action" />
        </Modal>
    }
}

@code {
    [Parameter] public string? Action { get; set; }
    [CascadingParameter] public Task<AuthenticationState> AuthenticationState { get; set; } = null!;

    RenderFragment modalFooter = 
    @<OneButtonModalFooter />
    ;

    bool collapsed;
    RenderFragment _panelLeftFold =
    @<svg width="1em" height="1em" viewBox="0 0 24 24" fill="currentColor" class="icon" xmlns="http://www.w3.org/2000/svg">
        <path d="M14.8075 9.24902C14.5304 8.94121 14.0562 8.91625 13.7483 9.19328L11.2483 11.4428C11.0902 11.585 11 11.7875 11 12.0001C11 12.2127 11.0902 12.4152 11.2483 12.5574L13.7483 14.8069C14.0562 15.084 14.5304 15.059 14.8075 14.7512C15.0846 14.4434 15.0596 13.9693 14.7517 13.6922L13.7045 12.7499H17.25C17.6642 12.7499 18 12.4142 18 12.0001C18 11.586 17.6642 11.2503 17.25 11.2503H13.7045L14.7517 10.308C15.0596 10.0309 15.0846 9.55683 14.8075 9.24902ZM2 17.2506C2 18.7691 3.23122 20 4.75 20L19.25 20C20.7688 20 22 18.7691 22 17.2506V6.74937C22 5.23093 20.7688 4 19.25 4H4.75C3.23122 4 2 5.23094 2 6.74937L2 17.2506ZM4.75 18.5003C4.05964 18.5003 3.5 17.9408 3.5 17.2506L3.5 6.74937C3.5 6.05917 4.05964 5.49966 4.75 5.49966L8.00415 5.49966L8.00415 18.5003H4.75ZM9.50415 18.5003L9.50415 5.49966L19.25 5.49965C19.9404 5.49965 20.5 6.05917 20.5 6.74937L20.5 17.2506C20.5 17.9408 19.9404 18.5003 19.25 18.5003L9.50415 18.5003Z" fill="#212121" />
        </svg>
    ;
    RenderFragment _panelLeftExpand =
    @<svg width="1em" height="1em" viewBox="0 0 24 24" fill="currentColor" class="icon" xmlns="http://www.w3.org/2000/svg">
        <path d="M14.1925 14.7512C14.4696 15.059 14.9438 15.084 15.2517 14.807L17.7517 12.5575C17.9098 12.4153 18 12.2127 18 12.0001C18 11.7876 17.9098 11.585 17.7517 11.4428L15.2517 9.19331C14.9438 8.91628 14.4696 8.94123 14.1925 9.24904C13.9154 9.55686 13.9404 10.031 14.2483 10.308L15.2955 11.2503L11.75 11.2503C11.3358 11.2503 11 11.586 11 12.0001C11 12.4143 11.3358 12.75 11.75 12.75H15.2955L14.2483 13.6923C13.9404 13.9693 13.9154 14.4434 14.1925 14.7512ZM2 6.75C2 5.23122 3.23122 4 4.75 4H19.25C20.7688 4 22 5.23122 22 6.75V17.25C22 18.7688 20.7688 20 19.25 20H4.75C3.23122 20 2 18.7688 2 17.25V6.75ZM4.75 5.5C4.05964 5.5 3.5 6.05964 3.5 6.75V17.25C3.5 17.9404 4.05964 18.5 4.75 18.5H8.00427V5.5H4.75ZM9.50427 5.5V18.5H19.25C19.9404 18.5 20.5 17.9404 20.5 17.25V6.75C20.5 6.05964 19.9404 5.5 19.25 5.5H9.50427Z" fill="#212121" />
    </svg>;

    protected override void OnInitialized()
    {
        AuthenticationStateProvider.AuthenticationStateChanged += OnAuthenticationStateChanged;
        base.OnInitialized();
    }

    private void OnAuthenticationStateChanged(Task<AuthenticationState> authenticationStateTask)
    {
        // https://github.com/dotnet/aspnetcore/issues/29235
        _ = InvokeAsync(async () =>
        {
            var authState = await authenticationStateTask;
            var user = authState.User;
            if (user.Identity?.IsAuthenticated ?? false)
            {
                await AppInsights.SetAuthenticatedUserContext(user.FindFirst("oid")?.Value!);
                logger.LogInformation("User logged in. User Id: {userId}", user.FindFirst("oid")?.Value!);
            }
            else
            {
                await AppInsights.ClearAuthenticatedUserContext();
                logger.LogInformation("User logged out.");
            }
        });
    }

    void toggleSider()
    {
        this.collapsed = !collapsed;
    }

    void HandleModalOk()
    {
        navManager.NavigateTo("/");
    }
}